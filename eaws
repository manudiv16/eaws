#!/usr/bin/env bash
# This script was generated by bashly 0.8.8 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
eaws_usage() {
  if [[ -n $long_usage ]]; then
    printf "eaws - Simple aws cli\n"
    echo

  else
    printf "eaws - Simple aws cli\n"
    echo

  fi

  printf "Usage:\n"
  printf "  eaws [OPTIONS] COMMAND\n"
  printf "  eaws [COMMAND] --help | -h\n"
  printf "  eaws --version\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  logs        Show logs from cloudwatch"
  echo "  container   Helper command to manage ecs containers"
  echo "  pipeline    Show status pipeline"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version"
    printf "    Show version number\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --verbose, -v"
    printf "    Print everything\n"
    echo

    # :flag.usage
    echo "  --profile, -p PROFILE"
    printf "\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  AWS_PROFILE"
    printf "    Set your aws profile\n"
    echo

  fi
}

# :command.usage
eaws_logs_usage() {
  if [[ -n $long_usage ]]; then
    printf "eaws logs - Show logs from cloudwatch\n"
    echo

  else
    printf "eaws logs - Show logs from cloudwatch\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "Usage:\n"
  printf "  eaws logs [OPTIONS] COMMAND\n"
  printf "  eaws logs [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  query   use cloudwatch insights"
  echo "  view    Show logstream"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --project, -j"
    printf "    Project to show information from\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  aws logs query: visualize logs in insights\n"
    printf "  aws logs view: view the logs of the selected container\n"
    echo

  fi
}

# :command.usage
eaws_logs_query_usage() {
  if [[ -n $long_usage ]]; then
    printf "eaws logs query - use cloudwatch insights\n"
    echo

  else
    printf "eaws logs query - use cloudwatch insights\n"
    echo

  fi

  printf "Alias: q\n"
  echo

  printf "Usage:\n"
  printf "  eaws logs query\n"
  printf "  eaws logs query --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
eaws_logs_view_usage() {
  if [[ -n $long_usage ]]; then
    printf "eaws logs view - Show logstream\n"
    echo

  else
    printf "eaws logs view - Show logstream\n"
    echo

  fi

  printf "Alias: v\n"
  echo

  printf "Usage:\n"
  printf "  eaws logs view\n"
  printf "  eaws logs view --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
eaws_container_usage() {
  if [[ -n $long_usage ]]; then
    printf "eaws container - Helper command to manage ecs containers\n"
    echo

  else
    printf "eaws container - Helper command to manage ecs containers\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "Usage:\n"
  printf "  eaws container COMMAND\n"
  printf "  eaws container [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  list      list all container in clusters"
  echo "  connect   connect to some container"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
eaws_container_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "eaws container list - list all container in clusters\n"
    echo

  else
    printf "eaws container list - list all container in clusters\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "Usage:\n"
  printf "  eaws container list\n"
  printf "  eaws container list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
eaws_container_connect_usage() {
  if [[ -n $long_usage ]]; then
    printf "eaws container connect - connect to some container\n"
    echo

  else
    printf "eaws container connect - connect to some container\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "Usage:\n"
  printf "  eaws container connect\n"
  printf "  eaws container connect --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
eaws_pipeline_usage() {
  if [[ -n $long_usage ]]; then
    printf "eaws pipeline - Show status pipeline\n"
    echo

  else
    printf "eaws pipeline - Show status pipeline\n"
    echo

  fi

  printf "Alias: p\n"
  echo

  printf "Usage:\n"
  printf "  eaws pipeline [OPTIONS]\n"
  printf "  eaws pipeline --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    echo "  --debug, -d"
    printf "    Inspect each step\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    printf "  eaws pipeline -d,--debug\n"
    printf "  eaws pipeline [--profile <profile>]\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/check_profile.sh
#!/usr/bin/env bash
# shellcheck source=/dev/null
check_profile() {
	if [ "${args[--profile]}" ];then
		source assume "${args[--profile]}"
	elif ! [ "${AWS_PROFILE:-}" ]
	then
		source assume
	fi
}

# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions

# :command.function
eaws_logs_query_command() {
  # src/logs_query_command.sh
  echo "# this file is located in 'src/logs_query_command.sh'"
  echo "# code for 'aws logs query' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
eaws_logs_view_command() {
  # src/logs_view_command.sh
  echo "# this file is located in 'src/logs_view_command.sh'"
  echo "# code for 'aws logs view' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
eaws_container_list_command() {
  # src/container_list_command.sh
  #!/usr/bin/env bash
  check_profile

  # Get cluster
  cluster=$(aws ecs list-clusters |jq -r '.clusterArns[]'| awk -F'/' '{print $2}'| fzf)
  # Get service
  aws ecs list-services --cluster "${cluster}" | jq '.serviceArns[]' | awk -F'/' '{print $3}'| sed 's/"//g' | awk 'NF'

}

# :command.function
eaws_container_connect_command() {
  # src/container_connect_command.sh
  #!/usr/bin/env bash
  check_profile

  # Get cluster
  cluster=$(aws ecs list-clusters |jq -r '.clusterArns[]'| awk -F'/' '{print $2}'| fzf)
  short_cluster="--cluster ${cluster}"

  # Get service
  service=$(aws ecs list-services "${short_cluster}" | jq '.serviceArns[]' | awk -F'/' '{print $3}'| sed 's/"//g' | awk 'NF' | fzf )

  # Get task id
  task=$(aws ecs list-tasks "${short_cluster}" --service-name "${service}" | jq '.taskArns[]'| sed 's/"//g'| fzf -1 )

  # container
  describe_container=$(aws ecs describe-tasks "${short_cluster}" --tasks "${task}")

  conteiner_instance_id=$( echo "$describe_container" | jq -r '.tasks[0].containerInstanceArn')

  container_runtime_id=$( echo "$describe_container" | jq '.tasks[0].containers[] | "\(.name) \(.lastStatus) \(.healthStatus) \(.runtimeId)"' | fzf -1| awk '{print $NF}'| sed 's/"//g' )

  ec2_instance=$( aws ecs describe-container-instances "${short_cluster}" --container-instances "${conteiner_instance_id}" | jq -r '.containerInstances[0].ec2InstanceId' )

  # Get target ssm
  document_name="AWS-StartInteractiveCommand"

  aws ssm start-session --target ${ec2_instance} --document-name ${document_name} --parameters command="sudo docker exec -ti ${container_runtime_id} sh"

}

# :command.function
eaws_pipeline_command() {
  # src/pipeline_command.sh
  #!/usr/bin/env bash
  check_profile

  pipeline_name=$( aws codepipeline list-pipelines | jq ".pipelines[].name" | sed 's/"//g' | fzf )

  pipeline=$( aws codepipeline get-pipeline-state --name "$pipeline_name" )

  if ! [[ "${args[--debug]}" ]]
  then
  	for stage in $(echo "$pipeline" | jq -r '.stageStates[].stageName')
  	do
  		stage_state=$(echo "$pipeline" | jq -r '.stageStates[] | select(.stageName == "'"$stage"'")')
  		echo "$stage_state" | jq -r '. | "'"$(green_bold "\(.stageName)")"' - '"$(yellow "\(.latestExecution.status)")"'\n"'
  		echo "$stage_state" | jq -r '.actionStates[] | "\(.actionName) - '"$(yellow "\(.latestExecution.status)")"' '"$(cyan "\(.latestExecution.lastStatusChange)")"' "'
  		echo ""
  	done
  fi

  p_step=$(echo "$pipeline" | jq -r '.stageStates[] | "\(.stageName) - \(.latestExecution.status)" ' | fzf | awk '{print $1}' )
  step=$(echo "$pipeline" | jq -r '.stageStates[] | select(.stageName == "'"$p_step"'")')
  p_action=$(echo "$step" |  jq -r '.actionStates[] | "\(.actionName) - \(.latestExecution.status)"' | fzf | awk '{print $1}' )
  action=$(echo "$step" | jq -r '.actionStates[] | select(.actionName == "'"$p_action"'")')

  echo "$action" \
  	| jq -r '. | "action name:'"$(green_bold "\(.actionName)")"'\nstatus: '"$(green_bold "\(.latestExecution.status)")"'\ndescription: '"$(green_bold "\(.latestExecution.errorDetails.message)")"'\nURL: '"$(green_bold "\(.entityUrl)")"'"'

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    eaws_usage
    exit
    ;;

  # :flag.case
  --verbose | -v )

    # :flag.case_no_arg
    args[--verbose]=1
    shift
    ;;

  # :flag.case
  --profile | -p )

    # :flag.case_arg
    if [[ -n ${2+x} ]]; then

      args[--profile]="$2"
      shift
      shift
    else
      printf "%s\n" "--profile requires an argument: --profile, -p PROFILE" >&2
      exit 1
    fi
    ;;

  esac

  # :command.dependencies_filter
  if ! [[ -x "$(command -v jq)" ]]; then
    printf "missing dependency: jq\n" >&2
    exit 1
  fi
  if ! [[ -x "$(command -v aws)" ]]; then
    printf "missing dependency: aws\n" >&2
    exit 1
  fi
  if ! [[ -x "$(command -v fzf)" ]]; then
    printf "missing dependency: fzf\n" >&2
    exit 1
  fi
  if ! [[ -x "$(command -v granted)" ]]; then
    printf "missing dependency: granted\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  logs | l )
    action="logs"
    shift
    eaws_logs_parse_requirements "$@"
    shift $#
    ;;

  container | c )
    action="container"
    shift
    eaws_container_parse_requirements "$@"
    shift $#
    ;;

  pipeline | p )
    action="pipeline"
    shift
    eaws_pipeline_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    eaws_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
eaws_logs_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    eaws_logs_usage
    exit
    ;;

  # :flag.case
  --project | -j )

    # :flag.case_no_arg
    args[--project]=1
    shift
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  query | q )
    action="query"
    shift
    eaws_logs_query_parse_requirements "$@"
    shift $#
    ;;

  view | v )
    action="view"
    shift
    eaws_logs_view_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    eaws_logs_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
eaws_logs_query_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    eaws_logs_query_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="logs query"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
eaws_logs_view_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    eaws_logs_view_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="logs view"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
eaws_container_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    eaws_container_usage
    exit
    ;;

  esac

  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  list | l )
    action="list"
    shift
    eaws_container_list_parse_requirements "$@"
    shift $#
    ;;

  connect | c )
    action="connect"
    shift
    eaws_container_connect_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  "" )
    eaws_container_usage >&2
    exit 1
    ;;

  * )
    printf "invalid command: %s\n" "$action" >&2
    exit 1
    ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
eaws_container_list_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    eaws_container_list_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="container list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
eaws_container_connect_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    eaws_container_connect_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="container connect"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.parse_requirements
eaws_pipeline_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    eaws_pipeline_usage
    exit
    ;;

  esac

  # :command.command_filter
  action="pipeline"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --debug | -d )

      # :flag.case_no_arg
      args[--debug]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key" >&2
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key" >&2
      exit 1

      ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "logs" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      eaws_logs_usage
    else
      eaws_logs_command
    fi

  elif [[ $action == "logs query" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      eaws_logs_query_usage
    else
      eaws_logs_query_command
    fi

  elif [[ $action == "logs view" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      eaws_logs_view_usage
    else
      eaws_logs_view_command
    fi

  elif [[ $action == "container" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      eaws_container_usage
    else
      eaws_container_command
    fi

  elif [[ $action == "container list" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      eaws_container_list_usage
    else
      eaws_container_list_command
    fi

  elif [[ $action == "container connect" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      eaws_container_connect_usage
    else
      eaws_container_connect_command
    fi

  elif [[ $action == "pipeline" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      eaws_pipeline_usage
    else
      eaws_pipeline_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
